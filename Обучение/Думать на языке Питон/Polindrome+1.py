'''Эти функции проверяют числа от 1 до 999999 и выводят список чисел, у которых:
1. Изначально последние 4 цифры являются полиндромом (19 8888)
2. Если прибавить к изначальному числу 1, то последние 5 цифер станут полиндромо (1 98889)
3. Если прибавить еще 1, то средние 4 цифры станут полиндромом (1 9889 0)
4. И если прибавить еще 1, то все 6 цифер станут полиндромом (198891)
*Полиндром, это цифра (слво) которое одинаково читается в любую сторону.
Для этого сначала создается список от 1 до 999999.'''
numbers = [i for i in range(1000000)]


def plus(numbers):
    '''Эта функция нам потом пригодится, она берет список(list) из строк(str), где каждая строка это цифра, и прибавляет к этой цифре 1.
    Для этого создается пустой список plus_1, а каждый элемент входного списка перебирается и после вычислений складывается в plus_1.
    Так как элемент входного списка это строка, и на выходе нам тоже хочется получить строку (чтобы обращаться к цифре по индексу[]), нужно сделать следующее:
    1. превратить строку в число – int(en);
    2. добавить к числу 1 – int(en) + 1
    3. превратить это все опять в строку – str(int(en) + 1)
    4. добавить результат в список – .append(str(int(en) + 1))
    В конце возвращается полученный список, где значения опять строки, но ко всем цифрам были добавлены 1.'''
    plus_1 = []
    for en in numbers:
        plus_1.append(str(int(en) + 1))
    return plus_1


def what_was_it(numbers):
    '''Это финальная функция, которая выводит изначальные цифры. Она включается в самом конце, собирая результат в список it_was.
    Тут просто берется каждый элемент входного списка (цифры строкой), и из элемента вычетается 3, так как 3 цифры назад и было нужное нам число.
    Станет более понятно в конце.'''
    it_was = []
    for en in numbers:
        it_was.append(str(int(en) - 3))
    return it_was


def last_4(numbers):
    '''Это первый шаг, тут из всех цифер от 1 до 999999 мы выбираем такие, у которых последние 4 знака образуют полиндром. Результат складывается в last_4_plindrom.
    Мы перебираем каждый элемент изначального списка, который пока является содержит цифры (int), и для начала превращаем цифру в строку, чтобы обращаться к ней по индексу[].
    Используем try, который сравнивает поледний элемент[-1] с четвертым с конца [-4], а предпоследний с пред-предпоследним. Если и то и другое совпадает, то элемент добавляется в новый список.
    Если мы смотрим на слишком короткое число, у которого нет подходящего индекса, то ошибка IndexError пропускается методом except.
    Затем получившийся список отдается следующей функции last_5.'''
    last_4_polindromes = []
    for en in numbers:
        en = str(en)
        try:
            if en[-1] == en[-4] and en[-2] == en[-3]:
                last_4_polindromes.append(en)
        except IndexError:
            pass
    last_5(last_4_polindromes)


def last_5(numbers):
    '''Работает идентично предыдущей, только предварительно отдает список функции plus_1, чтобы та прибавила к элементам 1.
    Едиственное отличие, что тут полиндром должен быть уже из 5 цифер, так что последняя цифра сравнивается с [-5], в предпоследняя с [-4].
    Результат отдается дальше.'''
    plus_1 = plus(numbers)
    last_5_polindromes = []
    for en in plus_1:
        try:
            if en[-1] == en[-5] and en[-2] == en[-4]:
                last_5_polindromes.append(en)
        except IndexError:
            pass
    mid_4(last_5_polindromes)


def mid_4(numbers):
    '''Тут выбираются такие цифры, у которых полиндром образован 4 центральными цифрами из 6. В остальном рабоает идентично.'''
    plus_1 = plus(numbers)
    mid_4_polindromes = []
    for en in plus_1:
        try:
            if en[-2] == en[-5] and en[-3] == en[-4]:
                mid_4_polindromes.append(en)
        except IndexError:
            pass
    all_6(mid_4_polindromes)


def all_6(numbers):
    '''Получив работу всех предыдущих функций, проверяет чтобы уже все 6 знаков были полиндромами. В остальном никаких отличий.
    Разве что в конце печатает результат, а не передает его дальше.'''
    plus_1 = plus(numbers)
    all_6_polindromes = []
    for en in plus_1:
        try:
            if en[-1] == en[-6] and en[-2] == en[-5] and en[-3] == en[-4]:
                all_6_polindromes.append(en)
        except IndexError:
            pass
    print(f'{what_was_it(all_6_polindromes)}')


last_4(numbers)