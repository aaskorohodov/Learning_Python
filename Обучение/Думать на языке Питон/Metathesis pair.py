'''Ищет пары-метатезисы – такие слова, где перестановка дищь 2х букв дает другое слово'''


file = open('C:\word.txt')

words = ''
for eo in file:
    words += eo
'''Превращаем файл в строку, где каждое слово идет с новой строки.'''


def anagrams(all_words):
    '''
    Ищем анаграмы, собирая их в словарь, где ключ = последовательность букв, а значение = последовательность слов,
    которые можно собрать из этих букв.
    1. Создаем пустой словарь
    2. Для каждого элемента (строки) исходного списка (строки), вызываем функцию, которая вернет список букв,
    из которых состоит это слово. Буквы возвращаются в алфавитном порядке, но их порядок роли не играет, он нужен,
    чтобы сделать следующий шаг
    3. Если этого набора букв еще нет в словаре, то кладем на место ключа, а значением кладем слово в виде списка.
    4. Если набор букв уже есть в словаре, то кладем к нему в значение (в список) слово, из которого получились эти буквы.
    '''
    an_dict = {}
    for el in all_words.split('\n'):
        l = letters(el)

        if l not in an_dict:
            an_dict[l] = [el]
        else:
            an_dict[l].append(el)

    return an_dict


def letters(word):
    '''Берет слово и превращает его в набор букв, из которогоэто слово состоит. Буквы ставит в алфавитный порядок.'''
    let = list(word)
    let.sort()
    let = ''.join(let)

    return let


def metathesis_pair(words):
    '''
    Среди собранного ранее словаря ищет пары-метатезисы.
    1. Берет исходный словарь и начинает перебирать списки (for ang in an_dict.values():)
    2. Для каждого слова в списке, пребирает все прочие слова в списке
    3. Если слова отличаются (причем первое меньше второго) и если разница между словами == 2 буквы, то вот наша пара.
    *сравнивать слова (<) надо, чтобы пара не попала в выдачу дважды. Это условие дает возможность сравнить 2 слова
    по разнице в 2 буквы первый раз, но переверни слова, и в выдачу они уже не попадут.
    **для сравнения на 2 буквы вызывается другая функция
    '''
    global anagrams
    an_dict = anagrams(words)
    for ang in an_dict.values():
        for word1 in ang:
            for word2 in ang:
                if word1 < word2 and word_difference(word1, word2) == 2:
                    print(word1, word2)


def word_difference(word1, word2):
    '''
    Сравнивает 2 слова, считает, на сколько букв они отличаются. Каждое различие == другая буква в том же месте слова.
    1. Заводит счетчик различий
    2. Сравнивает длину слов, если совпадает, то идет дальше
    3. Зипует слова, делая список кортежей, где в каждом (кортеже) лежат по 1 букве из кождого слова
    4. Берет кортеж и сравнивает быквы, если они не одинаковы, то добавляет в счетчик 1.
    '''
    count = 0
    if len(word1) == len(word2):
        for c1, c2 in zip(word1, word2):
            if c1 != c2:
                count += 1

        return count


metathesis_pair(words)